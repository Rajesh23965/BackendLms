"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildLayout = void 0;
const promises_1 = require("fs/promises");
const mustache_1 = require("mustache");
const path_1 = require("path");
const buildLayout = async (options, templateData = {}) => {
    const { templateLayoutSlots, templateLayoutName, templatePartialsFolder, templateFolder } = options;
    const layoutFilePath = (0, path_1.join)(templateFolder, `${templateLayoutName}.mjml`);
    const layoutFileContent = await (0, promises_1.readFile)(layoutFilePath, "utf-8").catch(() => {
        throw new Error(`[nodemailer-mjml] - Could not read layout template at path: ${layoutFilePath}`);
    });
    const layoutSlotsName = Array.from(layoutFileContent.matchAll(/\{{2}.*slots:(\w*).*\}{2}/g))
        .map((slot) => slot[1]);
    const layoutSlotsContent = Object.fromEntries(await Promise.all(layoutSlotsName.map(async (slotName) => {
        const dirBackwardWalk = Array.from({ length: (0, path_1.dirname)(`${templateLayoutName}.mjml`).split("/").filter((path) => path !== ".").length }, () => "../").join("");
        const slotContent = (templateLayoutSlots ?? {})[slotName];
        if (slotContent) {
            return [`slots:${slotName}`, `<mj-include path="${(0, path_1.join)(dirBackwardWalk, slotContent)}.mjml" />`];
        }
        if (templatePartialsFolder) {
            const defaultSlotFilePath = (0, path_1.join)(templateFolder, templatePartialsFolder, `${slotName}.mjml`);
            try {
                await (0, promises_1.access)(defaultSlotFilePath);
                return [`slots:${slotName}`, `<mj-include path="${(0, path_1.join)(dirBackwardWalk, templatePartialsFolder, `${slotName}.mjml`)}" />`];
            }
            catch (error) {
                /* do nothing */
            }
        }
        return [`slots:${slotName}`, ""];
    })));
    return (0, mustache_1.render)(layoutFileContent, { ...layoutSlotsContent, ...templateData }, {}, { escape: (text) => text, });
};
exports.buildLayout = buildLayout;
